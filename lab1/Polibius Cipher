import string

# Create the Polybius Square grid
grid = [['A', 'B', 'C', 'D', 'E'],
        ['F', 'G', 'H', 'I/J', 'K'],
        ['L', 'M', 'N', 'O', 'P'],
        ['Q', 'R', 'S', 'T', 'U'],
        ['V', 'W', 'X', 'Y', 'Z']]

# Create a dictionary to map letters to their grid coordinates
letter_to_coords = {}
for row in range(5):
    for col in range(5):
        letter = grid[row][col]
        letter_to_coords[letter] = (row, col)

# Create a dictionary to map grid coordinates to their letters
coords_to_letter = {}
for letter, coords in letter_to_coords.items():
    coords_to_letter[coords] = letter


def polybius_encode(plaintext):
    # Преобразуйте открытый текст в верхний регистр и удалите все неалфавитные символы
    plaintext = plaintext.upper()
    plaintext = ''.join(c for c in plaintext if c in string.ascii_uppercase)

    # Замените каждую букву соответствующими координатами сетки
    coords = [letter_to_coords[c] for c in plaintext]

    # Преобразуйте координаты сетки в строку чисел
    encoded = ''.join(f'{row + 1}{col + 1}' for row, col in coords)

    return encoded


def polybius_decode(ciphertext):
    # Преобразуйте зашифрованный текст в список координат сетки
    coords = [(int(c[0]) - 1, int(c[1]) - 1) for c in zip(ciphertext[::2], ciphertext[1::2])]

    # Преобразуйте координаты сетки в строку букв
    decoded = ''.join(coords_to_letter[c] for c in coords)

    return decoded

plaintext = 'HELLO WORLD'
ciphertext = polybius_encode(plaintext)
print(ciphertext)  # Output: 32423251154331332251

decoded_plaintext = polybius_decode(ciphertext)
print(decoded_plaintext)  # Output: HELLO WORLD
