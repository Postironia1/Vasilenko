#include <iostream>
#include <string>
#include <cctype>

using namespace std;

// Function to encode a plaintext string using the Polybius Cipher
string polybius_encode(string plaintext) {
    string ciphertext = "";
    int matrix[5][5] = { {11, 12, 13, 14, 15},
                        {21, 22, 23, 24, 25},
                        {31, 32, 33, 34, 35},
                        {41, 42, 43, 44, 45},
                        {51, 52, 53, 54, 55} };
    for (char c : plaintext) {
        if (isalpha(c)) {
            c = tolower(c);
            if (c == 'j') {
                c = 'i';
            }
            int row = (c - 'a') / 5;
            int col = (c - 'a') % 5;
            ciphertext += to_string(matrix[row][col]);
        }
        else {
            ciphertext += c;
        }
    }
    return ciphertext;
}

// Function to decode a ciphertext string using the Polybius Cipher
string polybius_decode(string ciphertext) {
    string plaintext = "";
    int matrix[5][5] = { {11, 12, 13, 14, 15},
                        {21, 22, 23, 24, 25},
                        {31, 32, 33, 34, 35},
                        {41, 42, 43, 44, 45},
                        {51, 52, 53, 54, 55} };
    for (int i = 0; i < ciphertext.length(); i += 2) {
        char c1 = ciphertext[i];
        char c2 = ciphertext[i + 1];
        if (isdigit(c1) && isdigit(c2)) {
            int row = (c1 - '0') - 1;
            int col = (c2 - '0') - 1;
            if (row >= 0 && row < sizeof(matrix) / sizeof(matrix[0]) &&
                col >= 0 && col < sizeof(matrix[0]) / sizeof(matrix[0][0])) {
                plaintext += matrix[row][col] + 'a';
            }
        }
        else {
            plaintext += c1;
            i--;
        }
    }
    return plaintext;
}

// Test the implementation with an example
int main() {
    string plaintext = "the quick brown fox jumps over the lazy dog";
    string ciphertext = polybius_encode(plaintext);
    cout << "Ciphertext: " << ciphertext << endl;
    string decodedtext = polybius_decode(ciphertext);
    cout << "Decoded text: " << decodedtext << endl;
    return 0;
}
